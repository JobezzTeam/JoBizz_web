{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _find from \"lodash/find\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport compose from 'recompose/compose';\nimport IntlProvider from '../IntlProvider';\nimport withLocale from '../IntlProvider/withLocale';\nimport FileItem from './UploadFileItem';\nimport UploadTrigger from './UploadTrigger';\nimport { prefix, ajaxUpload, defaultProps, getUnhandledProps } from '../utils';\nimport { getFiles, guid } from './utils';\n\nvar Uploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Uploader, _React$Component);\n\n  function Uploader(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.inputRef = void 0;\n\n    _this.handleRemoveFile = function (fileKey) {\n      var _this$props$onRemove, _this$props, _this$props$onChange, _this$props2;\n\n      var fileList = _this.getFileList();\n\n      var file = _find(fileList, function (f) {\n        return f.fileKey === fileKey;\n      });\n\n      var nextFileList = fileList.filter(function (f) {\n        return f.fileKey !== fileKey;\n      });\n\n      if (_this.xhrs[file.fileKey] && _this.xhrs[file.fileKey].readyState !== 4) {\n        _this.xhrs[file.fileKey].abort();\n      }\n\n      _this.setState({\n        fileList: nextFileList\n      });\n\n      (_this$props$onRemove = (_this$props = _this.props).onRemove) === null || _this$props$onRemove === void 0 ? void 0 : _this$props$onRemove.call(_this$props, file);\n      (_this$props$onChange = (_this$props2 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props2, nextFileList);\n    };\n\n    _this.handleUploadTriggerChange = function (event) {\n      var _this$props$onChange2, _this$props4;\n\n      var _this$props3 = _this.props,\n          autoUpload = _this$props3.autoUpload,\n          shouldQueueUpdate = _this$props3.shouldQueueUpdate;\n\n      var fileList = _this.getFileList();\n\n      var files = getFiles(event);\n      var newFileList = [];\n      Array.from(files).forEach(function (file) {\n        newFileList.push({\n          blobFile: file,\n          name: file.name,\n          status: 'inited',\n          fileKey: guid()\n        });\n      });\n      var nextFileList = [].concat(fileList, newFileList);\n\n      if ((shouldQueueUpdate === null || shouldQueueUpdate === void 0 ? void 0 : shouldQueueUpdate(nextFileList, newFileList)) === false) {\n        _this.cleanInputValue();\n\n        return;\n      }\n\n      (_this$props$onChange2 = (_this$props4 = _this.props).onChange) === null || _this$props$onChange2 === void 0 ? void 0 : _this$props$onChange2.call(_this$props4, nextFileList);\n\n      _this.setState({\n        fileList: nextFileList\n      }, function () {\n        autoUpload && _this.handleAjaxUpload();\n      });\n    };\n\n    _this.handleAjaxUploadSuccess = function (file, response, event) {\n      var nextFile = _extends({}, file, {\n        status: 'finished',\n        progress: 100\n      });\n\n      _this.updateFileList(nextFile, function () {\n        var _this$props$onSuccess, _this$props5;\n\n        (_this$props$onSuccess = (_this$props5 = _this.props).onSuccess) === null || _this$props$onSuccess === void 0 ? void 0 : _this$props$onSuccess.call(_this$props5, response, nextFile, event);\n      });\n    };\n\n    _this.handleAjaxUploadError = function (file, status, event) {\n      var nextFile = _extends({}, file, {\n        status: 'error'\n      });\n\n      _this.updateFileList(nextFile, function () {\n        var _this$props$onError, _this$props6;\n\n        (_this$props$onError = (_this$props6 = _this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props6, status, nextFile, event);\n      });\n    };\n\n    _this.handleAjaxUploadProgress = function (file, percent, event) {\n      var nextFile = _extends({}, file, {\n        status: 'uploading',\n        progress: percent\n      });\n\n      _this.updateFileList(nextFile, function () {\n        var _this$props$onProgres, _this$props7;\n\n        (_this$props$onProgres = (_this$props7 = _this.props).onProgress) === null || _this$props$onProgres === void 0 ? void 0 : _this$props$onProgres.call(_this$props7, percent, nextFile, event);\n      });\n    };\n\n    _this.handleUploadFile = function (file) {\n      var _this$props8 = _this.props,\n          name = _this$props8.name,\n          action = _this$props8.action,\n          headers = _this$props8.headers,\n          withCredentials = _this$props8.withCredentials,\n          timeout = _this$props8.timeout,\n          data = _this$props8.data,\n          onUpload = _this$props8.onUpload;\n      var xhr = ajaxUpload({\n        name: name,\n        timeout: timeout,\n        headers: headers,\n        data: data,\n        withCredentials: withCredentials,\n        file: file.blobFile,\n        url: action,\n        onError: _this.handleAjaxUploadError.bind(_assertThisInitialized(_this), file),\n        onSuccess: _this.handleAjaxUploadSuccess.bind(_assertThisInitialized(_this), file),\n        onProgress: _this.handleAjaxUploadProgress.bind(_assertThisInitialized(_this), file)\n      });\n\n      _this.updateFileList(_extends({}, file, {\n        status: 'uploading'\n      }));\n\n      _this.xhrs[file.fileKey] = xhr;\n      onUpload === null || onUpload === void 0 ? void 0 : onUpload(file);\n    };\n\n    _this.handleReupload = function (file) {\n      var _this$props9 = _this.props,\n          onReupload = _this$props9.onReupload,\n          autoUpload = _this$props9.autoUpload;\n      autoUpload && _this.handleUploadFile(file);\n      onReupload === null || onReupload === void 0 ? void 0 : onReupload(file);\n    };\n\n    _this.createFile = function (file) {\n      var fileKey = file.fileKey;\n      return _extends({}, file, {\n        fileKey: fileKey || guid(),\n        progress: 0\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.progressTimer = void 0;\n    _this.xhrs = {};\n    _this.uploadTrigger = null;\n    var _props$defaultFileLis = props.defaultFileList,\n        defaultFileList = _props$defaultFileLis === void 0 ? [] : _props$defaultFileLis;\n\n    var _fileList = defaultFileList.map(_this.createFile);\n\n    _this.state = {\n      fileList: _fileList,\n      fileMap: {}\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  } // public API\n\n\n  var _proto = Uploader.prototype;\n\n  _proto.start = function start(file) {\n    if (file) {\n      this.handleUploadFile(file);\n      return;\n    }\n\n    this.handleAjaxUpload();\n  };\n\n  _proto.getFileList = function getFileList() {\n    var fileList = this.props.fileList;\n    var fileMap = this.state.fileMap;\n\n    if (typeof fileList !== 'undefined') {\n      return fileList.map(function (file) {\n        return _extends({}, file, {}, fileMap[file.fileKey]);\n      });\n    }\n\n    return this.state.fileList;\n  };\n\n  _proto.cleanInputValue = function cleanInputValue() {\n    if (this.inputRef.current) {\n      this.inputRef.current.getInputInstance().value = '';\n    }\n  };\n\n  _proto.handleAjaxUpload = function handleAjaxUpload() {\n    var _this2 = this;\n\n    var shouldUpload = this.props.shouldUpload;\n    var fileList = this.getFileList();\n    fileList.forEach(function (file) {\n      if ((shouldUpload === null || shouldUpload === void 0 ? void 0 : shouldUpload(file)) === false) {\n        return;\n      }\n\n      if (file.status === 'inited') {\n        _this2.handleUploadFile(file);\n      }\n    });\n    this.cleanInputValue();\n  };\n\n  _proto.updateFileList = function updateFileList(nextFile, callback) {\n    var fileList = this.getFileList();\n    var nextFileList = fileList.map(function (file) {\n      return file.fileKey === nextFile.fileKey ? nextFile : file;\n    });\n    var nextState = {\n      fileList: nextFileList\n    };\n\n    if (nextFile.progress) {\n      var fileMap = this.state.fileMap;\n      fileMap[nextFile.fileKey] = {\n        progress: nextFile.progress,\n        status: nextFile.status\n      };\n      nextState.fileMap = fileMap;\n    }\n\n    this.setState(nextState, callback);\n  };\n\n  _proto.renderFileItems = function renderFileItems() {\n    var _this3 = this;\n\n    var _this$props10 = this.props,\n        disabledFileItem = _this$props10.disabledFileItem,\n        listType = _this$props10.listType,\n        onPreview = _this$props10.onPreview,\n        maxPreviewFileSize = _this$props10.maxPreviewFileSize,\n        renderFileInfo = _this$props10.renderFileInfo,\n        removable = _this$props10.removable;\n    var fileList = this.getFileList();\n    return React.createElement(\"div\", {\n      key: \"items\",\n      className: this.addPrefix('file-items')\n    }, fileList.map(function (file, index) {\n      return React.createElement(FileItem, {\n        key: file.fileKey || index,\n        file: file,\n        maxPreviewFileSize: maxPreviewFileSize,\n        listType: listType,\n        disabled: disabledFileItem,\n        onPreview: onPreview,\n        onReupload: _this3.handleReupload,\n        onCancel: _this3.handleRemoveFile,\n        renderFileInfo: renderFileInfo,\n        removable: removable\n      });\n    }));\n  };\n\n  _proto.renderUploadTrigger = function renderUploadTrigger() {\n    var _this$props11 = this.props,\n        name = _this$props11.name,\n        multiple = _this$props11.multiple,\n        disabled = _this$props11.disabled,\n        accept = _this$props11.accept,\n        children = _this$props11.children,\n        toggleComponentClass = _this$props11.toggleComponentClass,\n        rest = _objectWithoutPropertiesLoose(_this$props11, [\"name\", \"multiple\", \"disabled\", \"accept\", \"children\", \"toggleComponentClass\"]);\n\n    var unhandled = getUnhandledProps(Uploader, rest);\n    return React.createElement(UploadTrigger, _extends({}, unhandled, {\n      name: name,\n      key: \"trigger\",\n      multiple: multiple,\n      disabled: disabled,\n      accept: accept,\n      ref: this.inputRef,\n      onChange: this.handleUploadTriggerChange,\n      componentClass: toggleComponentClass\n    }), children);\n  };\n\n  _proto.render = function render() {\n    var _this$props12 = this.props,\n        classPrefix = _this$props12.classPrefix,\n        className = _this$props12.className,\n        listType = _this$props12.listType,\n        fileListVisible = _this$props12.fileListVisible,\n        locale = _this$props12.locale,\n        style = _this$props12.style;\n    var classes = classNames(classPrefix, this.addPrefix(listType), className);\n    var renderList = [this.renderUploadTrigger()];\n\n    if (fileListVisible) {\n      renderList.push(this.renderFileItems());\n    }\n\n    if (listType === 'picture') {\n      renderList.reverse();\n    }\n\n    return React.createElement(IntlProvider, {\n      locale: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, renderList));\n  };\n\n  return Uploader;\n}(React.Component);\n\nUploader.propTypes = {\n  action: PropTypes.string,\n  accept: PropTypes.string,\n  autoUpload: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  defaultFileList: PropTypes.array,\n  fileList: PropTypes.array,\n  data: PropTypes.object,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledFileItem: PropTypes.bool,\n  name: PropTypes.string,\n  timeout: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  headers: PropTypes.object,\n  locale: PropTypes.object,\n  listType: PropTypes.oneOf(['text', 'picture-text', 'picture']),\n  shouldQueueUpdate: PropTypes.func,\n  shouldUpload: PropTypes.func,\n  onChange: PropTypes.func,\n  onUpload: PropTypes.func,\n  onReupload: PropTypes.func,\n  onPreview: PropTypes.func,\n  onError: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onProgress: PropTypes.func,\n  onRemove: PropTypes.func,\n  maxPreviewFileSize: PropTypes.number,\n  style: PropTypes.object,\n  toggleComponentClass: PropTypes.elementType,\n  renderFileInfo: PropTypes.func,\n  removable: PropTypes.bool,\n  fileListVisible: PropTypes.bool\n};\nUploader.defaultProps = {\n  autoUpload: true,\n  timeout: 0,\n  name: 'file',\n  multiple: false,\n  disabled: false,\n  withCredentials: false,\n  data: {},\n  listType: 'text',\n  removable: true,\n  fileListVisible: true\n};\nexport default compose(withLocale(['Uploader']), defaultProps({\n  classPrefix: 'uploader'\n}))(Uploader);","map":null,"metadata":{},"sourceType":"module"}