{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { prefix, defaultProps, getUnhandledProps } from '../utils';\nimport Animation from '../Animation';\nimport IntlContext from '../IntlProvider/IntlContext';\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Carousel, _React$Component);\n\n  function Carousel(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this._key = (Math.random() * 1e18).toString(36).slice(0, 6);\n    _this._timeListener = null;\n\n    _this.handleChange = function (event) {\n      var active = +event.target.value;\n\n      _this.setState({\n        active: active\n      });\n    };\n\n    _this.state = {\n      active: 0,\n      last: false\n    };\n    return _this;\n  }\n\n  var _proto = Carousel.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        autoplay = _this$props.autoplay,\n        autoplayInterval = _this$props.autoplayInterval,\n        children = _this$props.children;\n    var count = React.Children.count(children);\n\n    if (autoplay && count) {\n      this._timeListener = setInterval(function () {\n        var active = _this2.state.active;\n        var nextActive = active === count - 1 ? 0 : active + 1;\n\n        _this2.setState({\n          last: nextActive === count - 1,\n          active: nextActive\n        });\n      }, autoplayInterval);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this._timeListener) {\n      clearInterval(this._timeListener);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props2 = this.props,\n        Component = _this$props2.componentClass,\n        children = _this$props2.children,\n        classPrefix = _this$props2.classPrefix,\n        className = _this$props2.className,\n        placement = _this$props2.placement,\n        shape = _this$props2.shape,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"componentClass\", \"children\", \"classPrefix\", \"className\", \"placement\", \"shape\"]);\n\n    var _this$state = this.state,\n        active = _this$state.active,\n        last = _this$state.last;\n    var addPrefix = prefix(classPrefix);\n    var count = React.Children.count(children);\n    var labels = [];\n    var items = [];\n    var vertical = placement === 'left' || placement === 'right';\n    var lengthKey = vertical ? 'height' : 'width';\n    React.Children.forEach(children, function (child, index) {\n      var _extends2;\n\n      var id = _this3._key + \"-\" + index;\n      labels.push(React.createElement(\"li\", {\n        key: \"label\" + index,\n        className: addPrefix('label-wrapper')\n      }, React.createElement(\"input\", {\n        name: _this3._key,\n        id: id,\n        type: \"radio\",\n        onChange: _this3.handleChange,\n        value: index,\n        checked: active === index\n      }), React.createElement(\"label\", {\n        htmlFor: id,\n        className: addPrefix('label')\n      })));\n      items.push(React.cloneElement(child, {\n        key: \"slider-item\" + index,\n        style: _extends({}, child.props.style, (_extends2 = {}, _extends2[lengthKey] = 100 / count + \"%\", _extends2)),\n        className: classNames(addPrefix('slider-item'), child.props.className)\n      }));\n    });\n    var classes = classNames(className, classPrefix, addPrefix(\"placement-\" + placement), addPrefix(\"shape-\" + shape));\n    var unhandled = getUnhandledProps(Carousel, rest);\n    return React.createElement(Animation.Transition, {\n      enteredClassName: addPrefix('last'),\n      exitingClassName: addPrefix('reset'),\n      in: last\n    }, React.createElement(Component, _extends({\n      className: classes\n    }, unhandled), React.createElement(\"div\", {\n      className: addPrefix('content')\n    }, React.createElement(IntlContext.Consumer, null, function (context) {\n      var _sliderStyles;\n\n      var activeRatio = \"\" + (!vertical && (context === null || context === void 0 ? void 0 : context.rtl) ? '' : '-') + 100 / count * active + \"%\";\n      var sliderStyles = (_sliderStyles = {}, _sliderStyles[lengthKey] = count * 100 + \"%\", _sliderStyles.transform = vertical ? \"translate3d(0, \" + activeRatio + \" ,0)\" : \"translate3d(\" + activeRatio + \", 0 ,0)\", _sliderStyles);\n      return React.createElement(\"div\", {\n        className: addPrefix('slider'),\n        style: sliderStyles\n      }, items);\n    }), count ? React.createElement(\"div\", {\n      className: addPrefix('slider-after')\n    }, [items[items.length - 1], items[0]]) : null), React.createElement(\"div\", {\n      className: addPrefix('toolbar')\n    }, React.createElement(\"ul\", null, labels))));\n  };\n\n  return Carousel;\n}(React.Component);\n\nCarousel.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  componentClass: PropTypes.elementType,\n  autoplay: PropTypes.bool,\n  autoplayInterval: PropTypes.number,\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  shape: PropTypes.oneOf(['dot', 'bar'])\n};\nCarousel.defaultProps = {\n  autoplayInterval: 4000,\n  placement: 'bottom',\n  shape: 'dot'\n};\nexport default defaultProps({\n  classPrefix: 'carousel',\n  componentClass: 'div'\n})(Carousel);","map":null,"metadata":{},"sourceType":"module"}