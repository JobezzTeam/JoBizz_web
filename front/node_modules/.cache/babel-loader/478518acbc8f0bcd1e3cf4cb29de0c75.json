{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { on, getOffset } from 'dom-lib';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport { defaultProps } from '../utils';\n\nvar Affix =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Affix, _React$Component);\n\n  function Affix(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.containerRef = null;\n    _this.scrollListener = null;\n\n    _this.setContainerOffset = function () {\n      _this.setState(function () {\n        return {\n          offset: getOffset(_this.containerRef.current)\n        };\n      });\n    };\n\n    _this.updatePosition = function () {\n      var offset = _this.state.offset;\n      var _this$props = _this.props,\n          top = _this$props.top,\n          onChange = _this$props.onChange;\n      var scrollY = window.scrollY || window.pageYOffset;\n      var fixed = scrollY - (offset.top - top) >= 0;\n\n      if (fixed !== _this.state.fixed) {\n        _this.setState({\n          fixed: fixed\n        });\n\n        onChange === null || onChange === void 0 ? void 0 : onChange(fixed);\n      }\n    };\n\n    _this.state = {\n      offset: null,\n      fixed: false\n    };\n    _this.containerRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Affix.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.setContainerOffset();\n    this.scrollListener = on(window, 'scroll', this.updatePosition);\n    bindElementResize(this.containerRef.current, this.setContainerOffset);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.scrollListener) {\n      this.scrollListener.off();\n    }\n\n    if (this.containerRef.current) {\n      unbindElementResize(this.containerRef.current);\n    }\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        classPrefix = _this$props2.classPrefix,\n        children = _this$props2.children,\n        top = _this$props2.top,\n        className = _this$props2.className,\n        style = _this$props2.style;\n    var _this$state = this.state,\n        fixed = _this$state.fixed,\n        offset = _this$state.offset;\n    var classes = classNames(className, (_classNames = {}, _classNames[classPrefix] = fixed, _classNames));\n    var placeholderStyles = fixed ? {\n      width: offset.width,\n      height: offset.height\n    } : undefined;\n    var affixStyle = fixed ? _extends({\n      position: 'fixed',\n      top: top,\n      left: offset.left,\n      width: offset.width,\n      zIndex: 10\n    }, style) : style;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes,\n      style: affixStyle,\n      ref: this.containerRef\n    }, children), fixed && React.createElement(\"div\", {\n      \"aria-hidden\": \"true\",\n      style: placeholderStyles\n    }));\n  };\n\n  return Affix;\n}(React.Component);\n\nAffix.propTypes = {\n  top: PropTypes.number,\n  onChange: PropTypes.func\n};\nAffix.defaultProps = {\n  top: 0\n};\nexport default defaultProps({\n  classPrefix: 'affix'\n})(Affix);","map":null,"metadata":{},"sourceType":"module"}