{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isArray from \"lodash/isArray\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isString from \"lodash/isString\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosition, scrollTop, getHeight } from 'dom-lib';\nimport classNames from 'classnames';\nimport { shallowEqual } from 'rsuite-utils/lib/utils';\nimport { getUnhandledProps, prefix, defaultProps } from '../utils';\nimport DropdownMenuGroup from './DropdownMenuGroup';\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownMenu, _React$Component);\n\n  function DropdownMenu(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuBodyContainerRef = void 0;\n    _this.menuItems = {};\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.handleSelect = function (item, value, event, checked) {\n      var _this$props$onSelect, _this$props;\n\n      (_this$props$onSelect = (_this$props = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props, value, item, event, checked);\n    };\n\n    _this.bindMenuItems = function (disabled, key, ref) {\n      if (ref && !disabled) {\n        _this.menuItems[key] = ref;\n      }\n    };\n\n    _this.getItemData = function (itemData) {\n      return itemData;\n    };\n\n    _this.createMenuItems = function (items, groupId) {\n      if (items === void 0) {\n        items = [];\n      }\n\n      if (groupId === void 0) {\n        groupId = 0;\n      }\n\n      var _this$props2 = _this.props,\n          activeItemValues = _this$props2.activeItemValues,\n          focusItemValue = _this$props2.focusItemValue,\n          valueKey = _this$props2.valueKey,\n          labelKey = _this$props2.labelKey,\n          renderMenuItem = _this$props2.renderMenuItem,\n          renderMenuGroup = _this$props2.renderMenuGroup,\n          onGroupTitleClick = _this$props2.onGroupTitleClick,\n          disabledItemValues = _this$props2.disabledItemValues,\n          group = _this$props2.group,\n          dropdownMenuItemClassPrefix = _this$props2.dropdownMenuItemClassPrefix,\n          DropdownMenuItem = _this$props2.dropdownMenuItemComponentClass;\n      var nextItems = items.map(function (item, index) {\n        var value = item[valueKey];\n        var label = item[labelKey];\n\n        if (_isUndefined(label) && _isUndefined(item.groupTitle)) {\n          throw Error(\"labelKey \\\"\" + labelKey + \"\\\" is not defined in \\\"data\\\" : \" + index);\n        } // Use `value` in keys when If `value` is string or number\n\n\n        var onlyKey = _isString(value) || _isNumber(value) ? value : index;\n        /**\n         * Render <DropdownMenuGroup>\n         * when if `group` is enabled and `itme.children` is array\n         */\n\n        if (group && _isArray(item.children)) {\n          return React.createElement(DropdownMenuGroup, {\n            classPrefix: _this.addPrefix('group'),\n            key: onlyKey,\n            title: renderMenuGroup ? renderMenuGroup(item.groupTitle, item) : item.groupTitle,\n            onClick: onGroupTitleClick\n          }, _this.createMenuItems(item.children, onlyKey));\n        } else if (_isUndefined(value) && !_isArray(item.children)) {\n          throw Error(\"valueKey \\\"\" + valueKey + \"\\\" is not defined in \\\"data\\\" : \" + index + \" \");\n        }\n\n        var disabled = disabledItemValues.some(function (disabledValue) {\n          return shallowEqual(disabledValue, value);\n        });\n        return React.createElement(DropdownMenuItem, {\n          classPrefix: dropdownMenuItemClassPrefix,\n          getItemData: _this.getItemData.bind(_assertThisInitialized(_this), item),\n          key: groupId + \"-\" + onlyKey,\n          disabled: disabled,\n          active: !_isUndefined(activeItemValues) && activeItemValues.some(function (v) {\n            return shallowEqual(v, value);\n          }),\n          focus: !_isUndefined(focusItemValue) && shallowEqual(focusItemValue, value),\n          value: value,\n          ref: _this.bindMenuItems.bind(_assertThisInitialized(_this), disabled, groupId + \"-\" + onlyKey),\n          onSelect: _this.handleSelect.bind(_assertThisInitialized(_this), item)\n        }, renderMenuItem ? renderMenuItem(label, item) : label);\n      });\n      return nextItems;\n    };\n\n    _this.menuBodyContainerRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = DropdownMenu.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateScrollPoistion();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!shallowEqual(prevProps.focusItemValue, this.props.focusItemValue)) {\n      this.updateScrollPoistion();\n    }\n  };\n\n  _proto.updateScrollPoistion = function updateScrollPoistion() {\n    var container = this.menuBodyContainerRef.current;\n    var activeItem = container.querySelector(\".\" + this.addPrefix('item-focus'));\n\n    if (!activeItem) {\n      activeItem = container.querySelector(\".\" + this.addPrefix('item-active'));\n    }\n\n    if (!activeItem) {\n      return;\n    }\n\n    var position = getPosition(activeItem, container);\n    var sTop = scrollTop(container);\n    var sHeight = getHeight(container);\n\n    if (sTop > position.top) {\n      scrollTop(container, Math.max(0, position.top - 20));\n    } else if (position.top > sTop + sHeight) {\n      scrollTop(container, Math.max(0, position.top - sHeight + 32));\n    }\n  };\n\n  _proto.renderItems = function renderItems() {\n    var data = this.props.data;\n    this.menuItems = {};\n    return this.createMenuItems(data);\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        maxHeight = _this$props3.maxHeight,\n        className = _this$props3.className,\n        style = _this$props3.style,\n        rest = _objectWithoutPropertiesLoose(_this$props3, [\"maxHeight\", \"className\", \"style\"]);\n\n    var classes = classNames(this.addPrefix('items'), className);\n    var unhandled = getUnhandledProps(DropdownMenu, rest);\n\n    var styles = _extends({}, style, {\n      maxHeight: maxHeight\n    });\n\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes,\n      ref: this.menuBodyContainerRef,\n      style: styles\n    }), React.createElement(\"ul\", null, this.renderItems()));\n  };\n\n  return DropdownMenu;\n}(React.Component);\n\nDropdownMenu.propTypes = {\n  classPrefix: PropTypes.string,\n  data: PropTypes.array,\n  group: PropTypes.bool,\n  disabledItemValues: PropTypes.array,\n  activeItemValues: PropTypes.array,\n  focusItemValue: PropTypes.any,\n  maxHeight: PropTypes.number,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  dropdownMenuItemComponentClass: PropTypes.elementType,\n  dropdownMenuItemClassPrefix: PropTypes.string\n};\nDropdownMenu.defaultProps = {\n  data: [],\n  activeItemValues: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label'\n};\nexport default defaultProps({\n  classPrefix: 'dropdown-menu'\n})(DropdownMenu);","map":null,"metadata":{},"sourceType":"module"}