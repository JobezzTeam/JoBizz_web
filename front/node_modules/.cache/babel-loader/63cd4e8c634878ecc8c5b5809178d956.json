{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _omit from \"lodash/omit\";\nimport _pick from \"lodash/pick\";\nimport _remove from \"lodash/remove\";\nimport _trim from \"lodash/trim\";\nimport _clone from \"lodash/clone\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _get from \"lodash/get\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport compose from 'recompose/compose';\nimport { getWidth } from 'dom-lib';\nimport { reactToString, filterNodesOfTree, findNodeOfTree, shallowEqual } from 'rsuite-utils/lib/utils';\nimport { defaultProps, prefix, getUnhandledProps, createChainedFunction, tplTransform, getDataGroupBy, withPickerMethods } from '../utils';\nimport { DropdownMenu, DropdownMenuItem, DropdownMenuCheckItem, getToggleWrapperClassName, onMenuKeyDown, PickerToggle, MenuWrapper, PickerToggleTrigger } from '../Picker';\nimport InputAutosize from './InputAutosize';\nimport InputSearch from './InputSearch';\nimport Tag from '../Tag';\nimport { PLACEMENT } from '../constants';\n\nvar InputPicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(InputPicker, _React$Component);\n\n  InputPicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.data && !shallowEqual(nextProps.data, prevState.data)) {\n      return {\n        data: nextProps.data,\n        focusItemValue: _get(nextProps, \"data.0.\" + nextProps.valueKey)\n      };\n    }\n\n    return null;\n  };\n\n  function InputPicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuContainerRef = void 0;\n    _this.positionRef = void 0;\n    _this.toggleWrapperRef = void 0;\n    _this.toggleRef = void 0;\n    _this.triggerRef = void 0;\n    _this.inputRef = void 0;\n\n    _this.getFocusableMenuItems = function () {\n      var labelKey = _this.props.labelKey;\n      var menuItems = _this.menuContainerRef.current.menuItems;\n\n      if (!menuItems) {\n        return [];\n      }\n\n      var items = Object.values(menuItems).map(function (item) {\n        return item.props.getItemData();\n      });\n      return filterNodesOfTree(items, function (item) {\n        return _this.shouldDisplay(item[labelKey]);\n      });\n    };\n\n    _this.getToggleInstance = function () {\n      return _this.toggleRef.current;\n    };\n\n    _this.focusNextMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index + 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.focusPrevMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index - 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.handleKeyDown = function (event) {\n      if (!_this.menuContainerRef.current) {\n        return;\n      }\n\n      var multi = _this.props.multi;\n      onMenuKeyDown(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: multi ? _this.selectFocusMenuCheckItem : _this.selectFocusMenuItem,\n        esc: _this.handleCloseDropdown,\n        del: multi ? _this.removeLastItem : _this.handleClean\n      });\n    };\n\n    _this.handleClick = function () {\n      _this.focusInput();\n    };\n\n    _this.selectFocusMenuItem = function (event) {\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          searchKeyword = _this$state.searchKeyword;\n      var _this$props = _this.props,\n          valueKey = _this$props.valueKey,\n          data = _this$props.data,\n          disabledItemValues = _this$props.disabledItemValues;\n\n      if (!focusItemValue || !data) {\n        return;\n      } // If the value is disabled in this option, it is returned.\n\n\n      if (disabledItemValues === null || disabledItemValues === void 0 ? void 0 : disabledItemValues.some(function (item) {\n        return item === focusItemValue;\n      })) {\n        return;\n      } // Find active `MenuItem` by `value`\n\n\n      var focusItem = findNodeOfTree(_this.getAllData(), function (item) {\n        return shallowEqual(item[valueKey], focusItemValue);\n      });\n\n      if (!focusItem && focusItemValue === searchKeyword) {\n        focusItem = _this.createOption(searchKeyword);\n      }\n\n      _this.setState({\n        value: focusItemValue,\n        searchKeyword: ''\n      });\n\n      _this.handleSelect(focusItemValue, focusItem, event);\n\n      _this.handleChange(focusItemValue, event);\n\n      _this.handleCloseDropdown();\n    };\n\n    _this.selectFocusMenuCheckItem = function (event) {\n      var _this$props2 = _this.props,\n          valueKey = _this$props2.valueKey,\n          disabledItemValues = _this$props2.disabledItemValues;\n      var focusItemValue = _this.state.focusItemValue;\n\n      var value = _this.getValue();\n\n      var data = _this.getAllData();\n\n      if (!focusItemValue || !data) {\n        return;\n      } // If the value is disabled in this option, it is returned.\n\n\n      if (disabledItemValues === null || disabledItemValues === void 0 ? void 0 : disabledItemValues.some(function (item) {\n        return item === focusItemValue;\n      })) {\n        return;\n      }\n\n      if (!value.some(function (v) {\n        return shallowEqual(v, focusItemValue);\n      })) {\n        value.push(focusItemValue);\n      } else {\n        _remove(value, function (itemVal) {\n          return shallowEqual(itemVal, focusItemValue);\n        });\n      }\n\n      var focusItem = data.find(function (item) {\n        return shallowEqual(_get(item, valueKey), focusItemValue);\n      });\n\n      if (!focusItem) {\n        focusItem = _this.createOption(focusItemValue);\n      }\n\n      _this.setState({\n        value: value,\n        searchKeyword: ''\n      }, _this.updatePosition);\n\n      _this.handleSelect(value, focusItem, event);\n\n      _this.handleChange(value, event);\n    };\n\n    _this.handleItemSelect = function (value, item, event) {\n      var nextState = {\n        value: value,\n        focusItemValue: value,\n        searchKeyword: ''\n      };\n\n      _this.setState(nextState);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChange(value, event);\n\n      _this.handleCloseDropdown();\n    };\n\n    _this.handleCheckItemSelect = function (nextItemValue, item, event, checked) {\n      var value = _this.getValue();\n\n      if (checked) {\n        value.push(nextItemValue);\n      } else {\n        _remove(value, function (itemVal) {\n          return shallowEqual(itemVal, nextItemValue);\n        });\n      }\n\n      var nextState = {\n        value: value,\n        searchKeyword: '',\n        focusItemValue: nextItemValue\n      };\n\n      _this.setState(nextState, _this.updatePosition);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChange(value, event);\n\n      _this.focusInput();\n    };\n\n    _this.handleSelect = function (value, item, event) {\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          creatable = _this$props3.creatable;\n      var newData = _this.state.newData;\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, item, event);\n\n      if (creatable && item.create) {\n        delete item.create;\n\n        _this.setState({\n          newData: newData.concat(item)\n        });\n      }\n    };\n\n    _this.handleSearch = function (searchKeyword, event) {\n      var _this$props4 = _this.props,\n          onSearch = _this$props4.onSearch,\n          labelKey = _this$props4.labelKey,\n          valueKey = _this$props4.valueKey;\n      var filteredData = filterNodesOfTree(_this.getAllData(), function (item) {\n        return _this.shouldDisplay(item[labelKey], searchKeyword);\n      });\n      var nextState = {\n        searchKeyword: searchKeyword,\n        focusItemValue: filteredData.length ? filteredData[0][valueKey] : searchKeyword\n      };\n\n      _this.setState(nextState, _this.updatePosition);\n\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n    };\n\n    _this.handleOpenDropdown = function () {\n      if (_this.triggerRef.current) {\n        _this.triggerRef.current.show();\n      }\n    };\n\n    _this.handleCloseDropdown = function () {\n      if (_this.triggerRef.current) {\n        _this.triggerRef.current.hide();\n      }\n    };\n\n    _this.handleChange = function (value, event) {\n      var _this$props$onChange, _this$props5;\n\n      (_this$props$onChange = (_this$props5 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props5, value, event);\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props6 = _this.props,\n          disabled = _this$props6.disabled,\n          onClean = _this$props6.onClean;\n      var searchKeyword = _this.state.searchKeyword;\n\n      if (disabled || searchKeyword !== '') {\n        return;\n      }\n\n      var nextState = {\n        value: null,\n        focusItemValue: null,\n        searchKeyword: ''\n      };\n\n      _this.setState(nextState);\n\n      _this.handleChange(null, event);\n\n      _this.updatePosition();\n\n      onClean === null || onClean === void 0 ? void 0 : onClean(event);\n    };\n\n    _this.handleEntered = function () {\n      var _this$props$onOpen, _this$props7;\n\n      (_this$props$onOpen = (_this$props7 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props7);\n    };\n\n    _this.handleExited = function () {\n      var _this$props8 = _this.props,\n          onClose = _this$props8.onClose,\n          multi = _this$props8.multi;\n\n      var value = _this.getValue();\n\n      var nextState = {\n        focusItemValue: multi ? _get(value, 0) : value\n      };\n\n      if (multi) {\n        /**\n         在多选的情况下, 当 searchKeyword 过长，在 focus 的时候会导致内容换行。\n         把 searchKeyword 清空是为了，Menu 在展开时候位置正确。\n         */\n        nextState.searchKeyword = '';\n      }\n\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n\n      _this.setState(nextState);\n    };\n\n    _this.handleEnter = function () {\n      _this.focusInput();\n\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleExit = function () {\n      _this.blurInput();\n\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.handleRemoveItemByTag = function (tag, event) {\n      event.stopPropagation();\n\n      var value = _this.getValue();\n\n      _remove(value, function (itemVal) {\n        return shallowEqual(itemVal, tag);\n      });\n\n      _this.setState({\n        value: value\n      }, _this.updatePosition);\n\n      _this.handleChange(value, event);\n    };\n\n    _this.removeLastItem = function (event) {\n      var tagName = _get(event, 'target.tagName');\n\n      if (tagName !== 'INPUT') {\n        _this.focusInput();\n\n        return;\n      }\n\n      if (tagName === 'INPUT' && _get(event, 'target.value')) {\n        return;\n      }\n\n      var value = _this.getValue();\n\n      value.pop();\n\n      _this.setState({\n        value: value\n      }, _this.updatePosition);\n\n      _this.handleChange(value, event);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.renderMenuItem = function (label, item) {\n      var _this$props9 = _this.props,\n          locale = _this$props9.locale,\n          renderMenuItem = _this$props9.renderMenuItem;\n      var newLabel = item.create ? React.createElement(\"span\", null, tplTransform(locale.createOption, label)) : label;\n      return renderMenuItem ? renderMenuItem(newLabel, item) : newLabel;\n    };\n\n    var defaultValue = props.defaultValue,\n        groupBy = props.groupBy,\n        _valueKey = props.valueKey,\n        _labelKey = props.labelKey,\n        defaultOpen = props.defaultOpen,\n        _multi = props.multi,\n        _data = props.data;\n\n    var _value = _multi ? defaultValue || [] : defaultValue;\n\n    var _focusItemValue = _multi ? _get(_value, 0) : defaultValue;\n\n    _this.state = {\n      data: _data,\n      value: _value,\n      focusItemValue: _focusItemValue,\n      searchKeyword: '',\n      newData: [],\n      open: defaultOpen,\n      maxWidth: 100\n    };\n\n    if (groupBy === _valueKey || groupBy === _labelKey) {\n      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n    }\n\n    _this.menuContainerRef = React.createRef();\n    _this.positionRef = React.createRef();\n    _this.toggleWrapperRef = React.createRef();\n    _this.toggleRef = React.createRef();\n    _this.triggerRef = React.createRef();\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = InputPicker.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.toggleWrapperRef.current) {\n      var maxWidth = getWidth(this.toggleWrapperRef.current);\n      this.setState({\n        maxWidth: maxWidth\n      });\n    }\n  };\n\n  _proto.getValue = function getValue() {\n    var _this$props10 = this.props,\n        value = _this$props10.value,\n        multi = _this$props10.multi;\n    var nextValue = _isUndefined(value) ? this.state.value : value;\n\n    if (multi) {\n      return _clone(nextValue) || [];\n    }\n\n    return nextValue;\n  };\n\n  _proto.getAllData = function getAllData() {\n    var data = this.props.data;\n    var newData = this.state.newData;\n    return [].concat(data, newData);\n  };\n\n  _proto.getAllDataAndCache = function getAllDataAndCache() {\n    var cacheData = this.props.cacheData;\n    var data = this.getAllData();\n    return [].concat(data, cacheData);\n  };\n\n  _proto.getLabelByValue = function getLabelByValue(value) {\n    var _this$props11 = this.props,\n        renderValue = _this$props11.renderValue,\n        placeholder = _this$props11.placeholder,\n        valueKey = _this$props11.valueKey,\n        labelKey = _this$props11.labelKey; // Find active `MenuItem` by `value`\n\n    var activeItem = findNodeOfTree(this.getAllDataAndCache(), function (item) {\n      return shallowEqual(item[valueKey], value);\n    });\n    var displayElement = placeholder;\n\n    if (_get(activeItem, labelKey)) {\n      displayElement = _get(activeItem, labelKey);\n\n      if (renderValue) {\n        displayElement = renderValue(value, activeItem, displayElement);\n      }\n    }\n\n    return {\n      isValid: !!activeItem,\n      displayElement: displayElement\n    };\n  };\n\n  _proto.createOption = function createOption(value) {\n    var _ref2;\n\n    var _this$props12 = this.props,\n        valueKey = _this$props12.valueKey,\n        labelKey = _this$props12.labelKey,\n        groupBy = _this$props12.groupBy,\n        locale = _this$props12.locale;\n\n    if (groupBy) {\n      var _ref;\n\n      return _ref = {\n        create: true\n      }, _ref[groupBy] = locale.newItem, _ref[valueKey] = value, _ref[labelKey] = value, _ref;\n    }\n\n    return _ref2 = {\n      create: true\n    }, _ref2[valueKey] = value, _ref2[labelKey] = value, _ref2;\n  };\n\n  _proto.focusInput = function focusInput() {\n    var input = this.getInput();\n    if (!input) return;\n    input.focus();\n  };\n\n  _proto.blurInput = function blurInput() {\n    var input = this.getInput();\n    if (!input) return;\n    input.blur();\n  };\n\n  _proto.getInput = function getInput() {\n    var multi = this.props.multi;\n\n    if (multi) {\n      return this.inputRef.current.getInputInstance();\n    }\n\n    return this.inputRef.current;\n  };\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  _proto.shouldDisplay = function shouldDisplay(label, searchKeyword) {\n    var word = typeof searchKeyword === 'undefined' ? this.state.searchKeyword : searchKeyword;\n\n    if (!_trim(word)) {\n      return true;\n    }\n\n    var keyword = word.toLocaleLowerCase();\n\n    if (typeof label === 'string' || typeof label === 'number') {\n      return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n    } else if (React.isValidElement(label)) {\n      var nodes = reactToString(label);\n      return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n    }\n\n    return false;\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var valueKey = this.props.valueKey;\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if (shallowEqual(focusItemValue, items[i][valueKey])) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.updatePosition = function updatePosition() {\n    if (this.positionRef.current) {\n      this.positionRef.current.updatePosition(true);\n    }\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this2 = this;\n\n    var _this$props13 = this.props,\n        labelKey = _this$props13.labelKey,\n        groupBy = _this$props13.groupBy,\n        locale = _this$props13.locale,\n        renderMenu = _this$props13.renderMenu,\n        renderExtraFooter = _this$props13.renderExtraFooter,\n        menuClassName = _this$props13.menuClassName,\n        menuStyle = _this$props13.menuStyle,\n        menuAutoWidth = _this$props13.menuAutoWidth,\n        creatable = _this$props13.creatable,\n        valueKey = _this$props13.valueKey,\n        multi = _this$props13.multi,\n        sort = _this$props13.sort;\n    var _this$state2 = this.state,\n        focusItemValue = _this$state2.focusItemValue,\n        searchKeyword = _this$state2.searchKeyword;\n    var menuClassPrefix = this.addPrefix(multi ? 'check-menu' : 'select-menu');\n    var classes = classNames(menuClassPrefix, menuClassName);\n    var allData = this.getAllData();\n    var filteredData = filterNodesOfTree(allData, function (item) {\n      return _this2.shouldDisplay(item[labelKey]);\n    });\n\n    if (creatable && searchKeyword && !findNodeOfTree(allData, function (item) {\n      return item[valueKey] === searchKeyword;\n    })) {\n      filteredData = [].concat(filteredData, [this.createOption(searchKeyword)]);\n    } // Create a tree structure data when set `groupBy`\n\n\n    if (groupBy) {\n      filteredData = getDataGroupBy(filteredData, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      filteredData = filteredData.sort(sort(false));\n    }\n\n    var menuProps = _pick(this.props, Object.keys(_omit(DropdownMenu.propTypes, ['className', 'style', 'classPrefix'])));\n\n    var value = this.getValue();\n    var menu = filteredData.length ? React.createElement(DropdownMenu, _extends({}, menuProps, {\n      classPrefix: menuClassPrefix,\n      dropdownMenuItemClassPrefix: multi ? undefined : menuClassPrefix + \"-item\",\n      dropdownMenuItemComponentClass: multi ? DropdownMenuCheckItem : DropdownMenuItem,\n      ref: this.menuContainerRef,\n      activeItemValues: multi ? value : [value],\n      focusItemValue: focusItemValue,\n      data: filteredData,\n      group: !_isUndefined(groupBy),\n      onSelect: multi ? this.handleCheckItemSelect : this.handleItemSelect,\n      renderMenuItem: this.renderMenuItem\n    })) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText);\n    return React.createElement(MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: menuStyle,\n      getToggleInstance: this.getToggleInstance,\n      onKeyDown: this.handleKeyDown\n    }, renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  _proto.renderSingleValue = function renderSingleValue() {\n    var value = this.getValue();\n    return this.getLabelByValue(value);\n  };\n\n  _proto.renderMultiValue = function renderMultiValue() {\n    var _this3 = this;\n\n    var _this$props14 = this.props,\n        multi = _this$props14.multi,\n        disabled = _this$props14.disabled;\n\n    if (!multi) {\n      return null;\n    }\n\n    var tags = this.getValue() || [];\n    return tags.map(function (tag) {\n      var _this3$getLabelByValu = _this3.getLabelByValue(tag),\n          isValid = _this3$getLabelByValu.isValid,\n          displayElement = _this3$getLabelByValu.displayElement;\n\n      if (!isValid) {\n        return null;\n      }\n\n      return React.createElement(Tag, {\n        key: tag,\n        closable: !disabled,\n        title: typeof displayElement === 'string' ? displayElement : undefined,\n        onClose: _this3.handleRemoveItemByTag.bind(_this3, tag)\n      }, displayElement);\n    }).filter(function (item) {\n      return item !== null;\n    });\n  };\n\n  _proto.renderInputSearch = function renderInputSearch() {\n    var _this$props15 = this.props,\n        multi = _this$props15.multi,\n        onBlur = _this$props15.onBlur,\n        onFocus = _this$props15.onFocus;\n    var props = {\n      onBlur: onBlur,\n      onFocus: onFocus,\n      componentClass: 'input',\n      inputRef: this.inputRef\n    };\n\n    if (multi) {\n      props.componentClass = InputAutosize; // 52 = 55 (right padding)  - 2 (border) - 6 (left padding)\n\n      props.inputStyle = {\n        maxWidth: this.state.maxWidth - 63\n      };\n    }\n\n    return React.createElement(InputSearch, _extends({}, props, {\n      onChange: this.handleSearch,\n      value: this.state.open ? this.state.searchKeyword : ''\n    }));\n  };\n\n  _proto.render = function render() {\n    var _getToggleWrapperClas;\n\n    var _this$props16 = this.props,\n        disabled = _this$props16.disabled,\n        cleanable = _this$props16.cleanable,\n        locale = _this$props16.locale,\n        toggleComponentClass = _this$props16.toggleComponentClass,\n        style = _this$props16.style,\n        onEnter = _this$props16.onEnter,\n        onEntered = _this$props16.onEntered,\n        onExit = _this$props16.onExit,\n        onExited = _this$props16.onExited,\n        searchable = _this$props16.searchable,\n        multi = _this$props16.multi,\n        rest = _objectWithoutPropertiesLoose(_this$props16, [\"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\", \"searchable\", \"multi\"]);\n\n    var unhandled = getUnhandledProps(InputPicker, rest);\n\n    var _this$renderSingleVal = this.renderSingleValue(),\n        isValid = _this$renderSingleVal.isValid,\n        displayElement = _this$renderSingleVal.displayElement;\n\n    var tagElements = this.renderMultiValue();\n    var hasValue = multi ? !!_get(tagElements, 'length') : isValid;\n    var classes = getToggleWrapperClassName('input', this.addPrefix, this.props, hasValue, (_getToggleWrapperClas = {}, _getToggleWrapperClas[this.addPrefix('tag')] = multi, _getToggleWrapperClas[this.addPrefix('focused')] = this.state.open, _getToggleWrapperClas));\n    var searching = !!this.state.searchKeyword && this.state.open;\n    var displaySearchInput = searchable && !disabled;\n    return React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      positionRef: this.positionRef,\n      trigger: \"active\",\n      onEnter: createChainedFunction(this.handleEnter, onEnter),\n      onEntered: createChainedFunction(this.handleEntered, onEntered),\n      onExit: createChainedFunction(this.handleExit, onExit),\n      onExited: createChainedFunction(this.handleExited, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      ref: this.toggleWrapperRef\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      tabIndex: null,\n      ref: this.toggleRef,\n      componentClass: toggleComponentClass,\n      onClean: this.handleClean,\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue\n    }), searching || multi && hasValue ? null : displayElement || locale.placeholder), React.createElement(\"div\", {\n      className: this.addPrefix('tag-wrapper')\n    }, tagElements, displaySearchInput && this.renderInputSearch())));\n  };\n\n  return InputPicker;\n}(React.Component);\n\nInputPicker.propTypes = {\n  data: PropTypes.array,\n  cacheData: PropTypes.array,\n  locale: PropTypes.object,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  containerPadding: PropTypes.number,\n  block: PropTypes.bool,\n  toggleComponentClass: PropTypes.elementType,\n  menuClassName: PropTypes.string,\n  menuStyle: PropTypes.object,\n  menuAutoWidth: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledItemValues: PropTypes.array,\n  maxHeight: PropTypes.number,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  placeholder: PropTypes.node,\n  searchable: PropTypes.bool,\n  cleanable: PropTypes.bool,\n  open: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  placement: PropTypes.oneOf(PLACEMENT),\n  style: PropTypes.object,\n  creatable: PropTypes.bool,\n  multi: PropTypes.bool,\n  preventOverflow: PropTypes.bool,\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  renderValue: PropTypes.func,\n  renderExtraFooter: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  onClean: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  onHide: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\nInputPicker.defaultProps = {\n  data: [],\n  cacheData: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    noResultsText: 'No results found',\n    newItem: 'New item',\n    createOption: 'Create option \"{0}\"'\n  },\n  searchable: true,\n  cleanable: true,\n  menuAutoWidth: true,\n  placement: 'bottomStart'\n};\nvar enhance = compose(defaultProps({\n  classPrefix: 'picker'\n}), withPickerMethods());\nexport default enhance(InputPicker);","map":null,"metadata":{},"sourceType":"module"}