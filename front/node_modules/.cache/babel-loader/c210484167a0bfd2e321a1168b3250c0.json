{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _trim from \"lodash/trim\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport * as React from 'react';\nimport { reactToString, shallowEqual, shallowEqualArray } from 'rsuite-utils/lib/utils';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 判断当前节点是否显示\n * @param {*} label\n * @param {*} searchKeyword\n */\n\nexport function shouldDisplay(label, searchKeyword) {\n  if (!_trim(searchKeyword)) {\n    return true;\n  }\n\n  var keyword = searchKeyword.toLocaleLowerCase();\n\n  if (typeof label === 'string') {\n    return label.toLocaleLowerCase().indexOf(keyword) >= 0;\n  } else if (React.isValidElement(label)) {\n    var nodes = reactToString(label);\n    return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n  }\n\n  return false;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  return inline ? height - MENU_PADDING * 2 : height - SEARCH_BAR_HEIGHT - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}