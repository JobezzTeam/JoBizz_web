{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isFunction from \"lodash/isFunction\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DOMMouseMoveTracker, addStyle, getWidth as _getWidth, getHeight as _getHeight, getOffset } from 'dom-lib';\nimport { getUnhandledProps, defaultProps, prefix } from '../utils';\nimport Tooltip from '../Tooltip';\n\nvar precisionMath = function precisionMath(value) {\n  return parseFloat(value.toFixed(10));\n};\n\nvar Slider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Slider, _React$Component);\n\n  function Slider(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.handleRef = void 0;\n    _this.barRef = void 0;\n    _this.mouseMoveTracker = null;\n\n    _this.handleClick = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.updatePosition(event);\n    };\n\n    _this.handleMouseDown = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.mouseMoveTracker = _this.getMouseMoveTracker();\n\n      _this.mouseMoveTracker.captureMouseMoves(event);\n\n      _this.setState({\n        handleDown: true\n      });\n    };\n\n    _this.handleMouseEnter = function () {\n      _this.setTooltipPosition();\n    };\n\n    _this.handleDragEnd = function () {\n      _this.releaseMouseMoves();\n\n      _this.setState({\n        handleDown: false\n      });\n    };\n\n    _this.handleDragMove = function (_deltaX, _deltaY, event) {\n      if (!_this.mouseMoveTracker || !_this.mouseMoveTracker.isDragging()) {\n        return;\n      }\n\n      _this.updatePosition(event);\n\n      _this.setTooltipPosition();\n    };\n\n    _this.releaseMouseMoves = function () {\n      if (_this.mouseMoveTracker) {\n        _this.mouseMoveTracker.releaseMouseMoves();\n\n        _this.mouseMoveTracker = null;\n      }\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      value: _this.checkValue(props.defaultValue, props)\n    };\n    _this.handleRef = React.createRef();\n    _this.barRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Slider.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.releaseMouseMoves();\n  };\n\n  _proto.getMouseMoveTracker = function getMouseMoveTracker() {\n    return this.mouseMoveTracker || new DOMMouseMoveTracker(this.handleDragMove, this.handleDragEnd, document.body);\n  };\n\n  _proto.getSplitCount = function getSplitCount() {\n    var _this$props = this.props,\n        min = _this$props.min,\n        step = _this$props.step;\n    var max = this.getMax();\n    return precisionMath((max - min) / step);\n  };\n\n  _proto.getMax = function getMax(props) {\n    var _ref = props || this.props,\n        max = _ref.max,\n        min = _ref.min,\n        step = _ref.step;\n\n    return precisionMath(Math.floor((max - min) / step) * step + min);\n  };\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return typeof value === 'undefined' ? this.state.value : this.checkValue(value);\n  };\n\n  _proto.setValue = function setValue(value) {\n    var _this$props2 = this.props,\n        onChange = _this$props2.onChange,\n        min = _this$props2.min;\n    var max = this.getMax();\n\n    if (value < min) {\n      value = min;\n    }\n\n    if (value > max) {\n      value = max;\n    }\n\n    this.setState({\n      value: value\n    });\n    onChange === null || onChange === void 0 ? void 0 : onChange(value);\n  };\n\n  _proto.setTooltipPosition = function setTooltipPosition() {\n    var tooltip = this.props.tooltip;\n\n    if (tooltip) {\n      var handle = this.handleRef.current;\n      var tip = handle.querySelector(\".\" + this.addPrefix('tooltip'));\n\n      var width = _getWidth(tip);\n\n      addStyle(tip, 'left', \"-\" + width / 2 + \"px\");\n    }\n  };\n\n  _proto.checkValue = function checkValue(value, props) {\n    var _ref2 = props || this.props,\n        min = _ref2.min;\n\n    var max = this.getMax(props);\n\n    if (value < min) {\n      return min;\n    }\n\n    if (value > max) {\n      return max;\n    }\n\n    return value;\n  };\n\n  _proto.getHeight = function getHeight() {\n    if (this.barRef.current) {\n      return _getHeight(this.barRef.current);\n    }\n\n    return 0;\n  };\n\n  _proto.getWidth = function getWidth() {\n    if (this.barRef.current) {\n      return _getWidth(this.barRef.current);\n    }\n\n    return 0;\n  }\n  /**\n   * 通过偏移量计算值\n   * @param {number} offset 偏移量\n   */\n  ;\n\n  _proto.calculateValue = function calculateValue(offset) {\n    var _this$props3 = this.props,\n        step = _this$props3.step,\n        vertical = _this$props3.vertical;\n    var count = this.getSplitCount();\n    var value = 0;\n\n    if (isNaN(offset)) {\n      return value;\n    }\n\n    if (vertical) {\n      var barHeight = this.getHeight();\n      value = Math.round(offset / (barHeight / count)) * step;\n    } else {\n      var barWidth = this.getWidth();\n      value = Math.round(offset / (barWidth / count)) * step;\n    }\n\n    return precisionMath(value);\n  };\n\n  _proto.updatePosition = function updatePosition(event) {\n    var _this$props4 = this.props,\n        vertical = _this$props4.vertical,\n        min = _this$props4.min,\n        locale = _this$props4.locale;\n    var barOffset = getOffset(this.barRef.current);\n    var offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;\n    var value = locale.rtl && !vertical ? barOffset.width - offset : offset;\n    this.setValue(this.calculateValue(value) + min);\n  };\n\n  _proto.renderMark = function renderMark(mark, last) {\n    var _classNames;\n\n    var renderMark = this.props.renderMark;\n    var classes = classNames(this.addPrefix('mark'), (_classNames = {}, _classNames[this.addPrefix('last-mark')] = last, _classNames));\n\n    if (renderMark) {\n      return React.createElement(\"span\", {\n        className: classes\n      }, React.createElement(\"span\", {\n        className: this.addPrefix('mark-content')\n      }, renderMark(mark)));\n    }\n\n    return null;\n  };\n\n  _proto.renderGraduated = function renderGraduated() {\n    var _this$props5 = this.props,\n        step = _this$props5.step,\n        min = _this$props5.min;\n    var max = this.getMax();\n    var count = this.getSplitCount();\n    var value = this.getValue();\n    var graduatedItems = [];\n    var pass = precisionMath(value / step - min / step);\n    var active = precisionMath(Math.ceil((value - min) / (max - min) * count));\n\n    for (var i = 0; i < count; i += 1) {\n      var _classNames2;\n\n      var classes = classNames((_classNames2 = {}, _classNames2[this.addPrefix('pass')] = i <= pass, _classNames2[this.addPrefix('active')] = i === active, _classNames2));\n      var mark = precisionMath(i * step + min);\n      var last = i === count - 1;\n      graduatedItems.push(React.createElement(\"li\", {\n        className: classes,\n        key: i\n      }, this.renderMark(mark), last && this.renderMark(max, true)));\n    }\n\n    return React.createElement(\"div\", {\n      className: this.addPrefix('graduator')\n    }, React.createElement(\"ul\", null, graduatedItems));\n  };\n\n  _proto.renderHanlde = function renderHanlde() {\n    var _extends2, _classNames3;\n\n    var _this$props6 = this.props,\n        handleClassName = _this$props6.handleClassName,\n        handleTitle = _this$props6.handleTitle,\n        min = _this$props6.min,\n        vertical = _this$props6.vertical,\n        tooltip = _this$props6.tooltip,\n        handleStyle = _this$props6.handleStyle,\n        renderTooltip = _this$props6.renderTooltip,\n        locale = _this$props6.locale;\n    var max = this.getMax();\n    var handleDown = this.state.handleDown;\n    var value = this.getValue();\n    var horizontalKey = locale.rtl ? 'right' : 'left';\n    var direction = vertical ? 'top' : horizontalKey;\n\n    var style = _extends({}, handleStyle, (_extends2 = {}, _extends2[direction] = (value - min) / (max - min) * 100 + \"%\", _extends2));\n\n    var handleClasses = classNames(this.addPrefix('handle'), handleClassName, (_classNames3 = {}, _classNames3[this.addPrefix('showtip')] = handleDown, _classNames3));\n    return React.createElement(\"div\", {\n      className: handleClasses,\n      role: \"presentation\",\n      onMouseDown: this.handleMouseDown,\n      onMouseEnter: this.handleMouseEnter,\n      style: style,\n      ref: this.handleRef\n    }, tooltip && React.createElement(Tooltip, {\n      className: classNames(this.addPrefix('tooltip'), 'placement-top')\n    }, renderTooltip ? renderTooltip(value) : value), handleTitle);\n  };\n\n  _proto.renderProgress = function renderProgress() {\n    var _style;\n\n    var _this$props7 = this.props,\n        vertical = _this$props7.vertical,\n        min = _this$props7.min;\n    var max = this.getMax();\n    var value = this.getValue();\n    var key = vertical ? 'height' : 'width';\n    var style = (_style = {}, _style[key] = (value - min) / (max - min) * 100 + \"%\", _style);\n    return React.createElement(\"div\", {\n      style: style,\n      className: this.addPrefix('progress-bar')\n    });\n  };\n\n  _proto.render = function render() {\n    var _classNames4;\n\n    var _this$props8 = this.props,\n        graduated = _this$props8.graduated,\n        className = _this$props8.className,\n        barClassName = _this$props8.barClassName,\n        progress = _this$props8.progress,\n        vertical = _this$props8.vertical,\n        disabled = _this$props8.disabled,\n        classPrefix = _this$props8.classPrefix,\n        renderMark = _this$props8.renderMark,\n        rest = _objectWithoutPropertiesLoose(_this$props8, [\"graduated\", \"className\", \"barClassName\", \"progress\", \"vertical\", \"disabled\", \"classPrefix\", \"renderMark\"]);\n\n    var handleDown = this.state.handleDown;\n    var classes = classNames(classPrefix, className, (_classNames4 = {}, _classNames4[this.addPrefix('vertical')] = vertical, _classNames4[this.addPrefix('disabled')] = disabled, _classNames4[this.addPrefix('graduated')] = graduated, _classNames4[this.addPrefix('dragging')] = handleDown, _classNames4[this.addPrefix('with-mark')] = _isFunction(renderMark), _classNames4));\n    var unhandled = getUnhandledProps(Slider, rest);\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes,\n      onClick: this.handleClick,\n      role: \"presentation\"\n    }), React.createElement(\"div\", {\n      className: classNames(this.addPrefix('bar'), barClassName),\n      ref: this.barRef\n    }, progress && this.renderProgress(), graduated && this.renderGraduated()), this.renderHanlde());\n  };\n\n  return Slider;\n}(React.Component);\n\nSlider.propTypes = {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.number,\n  defaultValue: PropTypes.number,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  handleClassName: PropTypes.string,\n  handleTitle: PropTypes.node,\n  barClassName: PropTypes.string,\n  handleStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  graduated: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  progress: PropTypes.bool,\n  vertical: PropTypes.bool,\n  onChange: PropTypes.func,\n  renderMark: PropTypes.func,\n  renderTooltip: PropTypes.func,\n  locale: PropTypes.object\n};\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1,\n  defaultValue: 0,\n  tooltip: true,\n  locale: {}\n};\nexport default defaultProps({\n  classPrefix: 'slider'\n})(Slider);","map":null,"metadata":{},"sourceType":"module"}