{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _get from \"lodash/get\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Collapse from 'rsuite-utils/lib/Animation/Collapse';\nimport shallowEqual from 'rsuite-utils/lib/utils/shallowEqual';\nimport setDisplayName from 'recompose/setDisplayName';\nimport DropdownMenuItem from './DropdownMenuItem';\nimport Icon from '../Icon';\nimport Ripple from '../Ripple';\nimport { createChainedFunction, prefix, ReactChildren, getUnhandledProps, defaultProps } from '../utils';\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownMenu, _React$Component);\n\n  function DropdownMenu() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleToggleChange = function (eventKey, event) {\n      var _this$props$onToggle, _this$props;\n\n      (_this$props$onToggle = (_this$props = _this.props).onToggle) === null || _this$props$onToggle === void 0 ? void 0 : _this$props$onToggle.call(_this$props, eventKey, event);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    return _this;\n  }\n\n  var _proto = DropdownMenu.prototype;\n\n  _proto.getMenuItemsAndStatus = function getMenuItemsAndStatus(children) {\n    var _this2 = this;\n\n    var hasActiveItem;\n    var _this$props2 = this.props,\n        activeKey = _this$props2.activeKey,\n        onSelect = _this$props2.onSelect,\n        classPrefix = _this$props2.classPrefix,\n        _this$props2$openKeys = _this$props2.openKeys,\n        openKeys = _this$props2$openKeys === void 0 ? [] : _this$props2$openKeys;\n    var items = React.Children.map(children, function (item, index) {\n      var displayName = _get(item, ['type', 'displayName']);\n\n      var active;\n\n      if (displayName === 'DropdownMenuItem' || displayName === 'DropdownMenu') {\n        active = _this2.isActive(item.props, activeKey);\n\n        if (active) {\n          hasActiveItem = true;\n        }\n      }\n\n      if (displayName === 'DropdownMenuItem') {\n        var onItemSelect = item.props.onSelect;\n        return React.cloneElement(item, {\n          key: index,\n          active: active,\n          onSelect: createChainedFunction(onSelect, onItemSelect)\n        });\n      } else if (displayName === 'DropdownMenu') {\n        var _classNames;\n\n        var itemsAndStatus = _this2.getMenuItemsAndStatus(item.props.children);\n\n        var _item$props = item.props,\n            icon = _item$props.icon,\n            open = _item$props.open,\n            trigger = _item$props.trigger,\n            pullLeft = _item$props.pullLeft,\n            eventKey = _item$props.eventKey,\n            title = _item$props.title;\n        var expanded = openKeys.some(function (key) {\n          return shallowEqual(key, eventKey);\n        });\n        var itemClassName = classNames(_this2.addPrefix(\"pull-\" + (pullLeft ? 'left' : 'right')), (_classNames = {}, _classNames[_this2.addPrefix('item-focus')] = _this2.isActive(item.props, activeKey), _classNames));\n        return React.createElement(DropdownMenuItem, {\n          icon: icon,\n          open: open,\n          trigger: trigger,\n          expanded: expanded,\n          className: itemClassName,\n          pullLeft: pullLeft,\n          componentClass: \"div\",\n          submenu: true\n        }, React.createElement(\"div\", {\n          className: _this2.addPrefix('toggle'),\n          onClick: _this2.handleToggleChange.bind(_this2, eventKey),\n          role: \"menu\",\n          tabIndex: -1\n        }, React.createElement(\"span\", null, title), React.createElement(Icon, {\n          className: _this2.addPrefix('toggle-icon'),\n          icon: pullLeft ? 'angle-left' : 'angle-right'\n        }), React.createElement(Ripple, null)), _this2.renderCollapse(React.createElement(\"ul\", {\n          role: \"menu\",\n          className: classPrefix\n        }, itemsAndStatus.items), expanded));\n      }\n\n      return item;\n    });\n    return {\n      items: items,\n      active: hasActiveItem\n    };\n  };\n\n  _proto.isActive = function isActive(props, activeKey) {\n    var _this3 = this;\n\n    if (props.active || !_isUndefined(activeKey) && shallowEqual(props.eventKey, activeKey)) {\n      return true;\n    }\n\n    if (ReactChildren.some(props.children, function (child) {\n      return _this3.isActive(child.props, activeKey);\n    })) {\n      return true;\n    }\n\n    return props.active;\n  };\n\n  _proto.renderCollapse = function renderCollapse(children, expanded) {\n    return this.props.collapsible ? React.createElement(Collapse, {\n      in: expanded,\n      exitedClassName: this.addPrefix('collapse-out'),\n      exitingClassName: this.addPrefix('collapsing'),\n      enteredClassName: this.addPrefix('collapse-in'),\n      enteringClassName: this.addPrefix('collapsing')\n    }, children) : children;\n  };\n\n  _proto.render = function render() {\n    var _classNames2;\n\n    var _this$props3 = this.props,\n        children = _this$props3.children,\n        className = _this$props3.className,\n        classPrefix = _this$props3.classPrefix,\n        expanded = _this$props3.expanded,\n        props = _objectWithoutPropertiesLoose(_this$props3, [\"children\", \"className\", \"classPrefix\", \"expanded\"]);\n\n    var _this$getMenuItemsAnd = this.getMenuItemsAndStatus(children),\n        items = _this$getMenuItemsAnd.items,\n        active = _this$getMenuItemsAnd.active;\n\n    var unhandled = getUnhandledProps(DropdownMenu, props);\n    var classes = classNames(classPrefix, className, (_classNames2 = {}, _classNames2[this.addPrefix('active')] = active, _classNames2));\n    return this.renderCollapse(React.createElement(\"ul\", _extends({}, unhandled, {\n      className: classes,\n      role: \"menu\"\n    }), items), expanded);\n  };\n\n  return DropdownMenu;\n}(React.Component);\n\nDropdownMenu.propTypes = {\n  activeKey: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  icon: PropTypes.node,\n  classPrefix: PropTypes.string,\n  pullLeft: PropTypes.bool,\n  onSelect: PropTypes.func,\n  title: PropTypes.node,\n  open: PropTypes.bool,\n  trigger: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf(['click', 'hover'])]),\n  eventKey: PropTypes.any,\n  openKeys: PropTypes.array,\n  expanded: PropTypes.bool,\n  collapsible: PropTypes.bool,\n  onToggle: PropTypes.func\n};\nvar EnhancedDropdownMenu = defaultProps({\n  classPrefix: 'dropdown-menu'\n})(DropdownMenu);\nexport default setDisplayName('DropdownMenu')(EnhancedDropdownMenu);","map":null,"metadata":{},"sourceType":"module"}