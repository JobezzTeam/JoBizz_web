{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Ripple from '../Ripple';\nimport FormattedMessage from '../IntlProvider/FormattedMessage';\nimport { getUnhandledProps, defaultProps, prefix } from '../utils';\n\nvar Button = function Button(props) {\n  return React.createElement(\"button\", _extends({}, props, {\n    type: \"button\"\n  }));\n};\n\nvar UploadTrigger =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(UploadTrigger, _React$Component);\n\n  function UploadTrigger(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.inputRef = void 0;\n\n    _this.handleClick = function () {\n      !_this.props.disabled && _this.inputRef.current.click();\n    };\n\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = UploadTrigger.prototype;\n\n  _proto.getInputInstance = function getInputInstance() {\n    return this.inputRef.current;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props = this.props,\n        name = _this$props.name,\n        accept = _this$props.accept,\n        multiple = _this$props.multiple,\n        disabled = _this$props.disabled,\n        onChange = _this$props.onChange,\n        children = _this$props.children,\n        classPrefix = _this$props.classPrefix,\n        className = _this$props.className,\n        Component = _this$props.componentClass,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"name\", \"accept\", \"multiple\", \"disabled\", \"onChange\", \"children\", \"classPrefix\", \"className\", \"componentClass\"]);\n\n    var unhandled = getUnhandledProps(UploadTrigger, rest);\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('disabled')] = disabled, _classNames));\n\n    var buttonProps = _extends({}, unhandled, {\n      className: addPrefix('btn'),\n      onClick: this.handleClick\n    });\n\n    var trigger = children ? React.cloneElement(React.Children.only(children), buttonProps) : React.createElement(Component, buttonProps, React.createElement(FormattedMessage, {\n      id: \"upload\"\n    }), React.createElement(Ripple, null));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      name: name,\n      multiple: multiple,\n      disabled: disabled,\n      accept: accept,\n      ref: this.inputRef,\n      onChange: onChange\n    }), trigger);\n  };\n\n  return UploadTrigger;\n}(React.Component);\n\nUploadTrigger.propTypes = {\n  name: PropTypes.string,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  accept: PropTypes.string,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  componentClass: PropTypes.elementType\n};\nexport default defaultProps({\n  componentClass: Button,\n  classPrefix: 'uploader-trigger'\n})(UploadTrigger);","map":null,"metadata":{},"sourceType":"module"}