{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _get from \"lodash/get\";\nimport _pick from \"lodash/pick\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport setDisplayName from 'recompose/setDisplayName';\nimport setStatic from 'recompose/setStatic';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport BaseModal from 'rsuite-utils/lib/Overlay/Modal';\nimport Bounce from 'rsuite-utils/lib/Animation/Bounce';\nimport { on, getHeight, isOverflowing, getScrollbarSize, ownerDocument } from 'dom-lib';\nimport { prefix, defaultProps, createChainedFunction, isRTL } from '../utils';\nimport ModalDialog from './ModalDialog';\nimport ModalBody from './ModalBody';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport ModalFooter from './ModalFooter';\nimport { SIZE } from '../constants';\nimport ModalContext from './ModalContext';\nvar BACKDROP_TRANSITION_DURATION = 150;\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Modal, _React$Component);\n\n  function Modal(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.dialogRef = void 0;\n    _this.modalRef = void 0;\n    _this.windowResizeListener = null;\n    _this.contentElement = null;\n\n    _this.getBodyStyles = function () {\n      return _this.state.bodyStyles;\n    };\n\n    _this.handleShow = function () {\n      var dialogElement = _this.dialogRef.current;\n\n      _this.updateModalStyles(dialogElement);\n\n      _this.contentElement = dialogElement.querySelector(\".\" + _this.addPrefix('content'));\n      _this.windowResizeListener = on(window, 'resize', _this.handleResize);\n      bindElementResize(_this.contentElement, _this.handleResize);\n    };\n\n    _this.handleHide = function () {\n      _this.destroyEvent();\n    };\n\n    _this.handleDialogClick = function (event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      var onHide = _this.props.onHide;\n      onHide && onHide(event);\n    };\n\n    _this.handleResize = function () {\n      _this.updateModalStyles(_this.dialogRef.current);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      modalStyles: {},\n      bodyStyles: {}\n    };\n    _this.dialogRef = React.createRef();\n    _this.modalRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.destroyEvent();\n  };\n\n  _proto.getStyles = function getStyles(dialogElement) {\n    var _modalStyles;\n\n    var _this$props = this.props,\n        container = _this$props.container,\n        overflow = _this$props.overflow,\n        drawer = _this$props.drawer;\n    var node = dialogElement || this.dialogRef.current;\n    var doc = ownerDocument(node);\n    var scrollHeight = node ? node.scrollHeight : 0;\n    var bodyIsOverflowing = isOverflowing(container || doc.body);\n    var modalIsOverflowing = scrollHeight > doc.documentElement.clientHeight;\n    var styles = {\n      modalStyles: (_modalStyles = {}, _modalStyles[isRTL() ? 'paddingLeft' : 'paddingRight'] = bodyIsOverflowing && !modalIsOverflowing ? getScrollbarSize() : 0, _modalStyles[isRTL() ? 'paddingRight' : 'paddingLeft'] = !bodyIsOverflowing && modalIsOverflowing ? getScrollbarSize() : 0, _modalStyles),\n      bodyStyles: {}\n    };\n\n    if (!overflow) {\n      return styles;\n    }\n\n    var bodyStyles = {\n      overflow: 'auto'\n    };\n\n    if (node) {\n      // default margin\n      var headerHeight = 46;\n      var footerHeight = 46;\n      var contentHeight = 30;\n      var headerDOM = node.querySelector(\".\" + this.addPrefix('header'));\n      var footerDOM = node.querySelector(\".\" + this.addPrefix('footer'));\n      var contentDOM = node.querySelector(\".\" + this.addPrefix('content'));\n      headerHeight = headerDOM ? getHeight(headerDOM) + headerHeight : headerHeight;\n      footerHeight = footerDOM ? getHeight(footerDOM) + headerHeight : headerHeight;\n      contentHeight = contentDOM ? getHeight(contentDOM) + contentHeight : contentHeight;\n\n      if (drawer) {\n        bodyStyles.height = contentHeight - (headerHeight + footerHeight);\n      } else {\n        /**\n         * Header height + Footer height + Dialog margin\n         */\n        var excludeHeight = headerHeight + footerHeight + 60;\n        var bodyHeight = getHeight(window) - excludeHeight;\n        var maxHeight = scrollHeight >= bodyHeight ? bodyHeight : scrollHeight;\n        bodyStyles.maxHeight = maxHeight;\n      }\n    }\n\n    styles.bodyStyles = bodyStyles;\n    return styles;\n  };\n\n  _proto.destroyEvent = function destroyEvent() {\n    if (this.windowResizeListener) {\n      this.windowResizeListener.off();\n    }\n\n    if (this.contentElement) {\n      unbindElementResize(this.contentElement);\n    }\n  };\n\n  _proto.updateModalStyles = function updateModalStyles(dialogElement) {\n    this.setState(this.getStyles(dialogElement));\n  };\n\n  _proto.render = function render() {\n    var _classNames, _classNames2;\n\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        children = _this$props2.children,\n        dialogClassName = _this$props2.dialogClassName,\n        backdropClassName = _this$props2.backdropClassName,\n        dialogStyle = _this$props2.dialogStyle,\n        animation = _this$props2.animation,\n        classPrefix = _this$props2.classPrefix,\n        style = _this$props2.style,\n        show = _this$props2.show,\n        size = _this$props2.size,\n        full = _this$props2.full,\n        dialogComponentClass = _this$props2.dialogComponentClass,\n        animationProps = _this$props2.animationProps,\n        animationTimeout = _this$props2.animationTimeout,\n        onHide = _this$props2.onHide,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"className\", \"children\", \"dialogClassName\", \"backdropClassName\", \"dialogStyle\", \"animation\", \"classPrefix\", \"style\", \"show\", \"size\", \"full\", \"dialogComponentClass\", \"animationProps\", \"animationTimeout\", \"onHide\"]);\n\n    var modalStyles = this.state.modalStyles;\n    var inClass = {\n      in: show && !animation\n    };\n    var Dialog = dialogComponentClass;\n\n    var parentProps = _pick(rest, _get(BaseModal, 'handledProps'));\n\n    var classes = classNames(this.addPrefix(size), className, (_classNames = {}, _classNames[this.addPrefix('full')] = full, _classNames));\n    var modal = React.createElement(Dialog, _extends({}, _pick(rest, Object.keys(ModalDialog.propTypes || {})), {\n      style: _extends({}, modalStyles, {}, style),\n      classPrefix: classPrefix,\n      className: classes,\n      dialogClassName: dialogClassName,\n      dialogStyle: dialogStyle,\n      onClick: rest.backdrop === true ? this.handleDialogClick : null,\n      dialogRef: this.dialogRef\n    }), children);\n    return React.createElement(ModalContext.Provider, {\n      value: {\n        onModalHide: onHide,\n        getBodyStyles: this.getBodyStyles\n      }\n    }, React.createElement(BaseModal, _extends({\n      ref: this.modalRef,\n      show: show,\n      onHide: onHide,\n      className: this.addPrefix('wrapper'),\n      onEntering: createChainedFunction(this.handleShow, this.props.onEntering),\n      onExited: createChainedFunction(this.handleHide, this.props.onExited),\n      backdropClassName: classNames(this.addPrefix('backdrop'), backdropClassName, inClass),\n      containerClassName: classNames(this.addPrefix('open'), (_classNames2 = {}, _classNames2[this.addPrefix('has-backdrop')] = rest.backdrop, _classNames2)),\n      transition: animation ? animation : undefined,\n      animationProps: animationProps,\n      dialogTransitionTimeout: animationTimeout,\n      backdropTransitionTimeout: BACKDROP_TRANSITION_DURATION\n    }, parentProps), modal));\n  };\n\n  return Modal;\n}(React.Component);\n\nModal.propTypes = {\n  classPrefix: PropTypes.string,\n  size: PropTypes.oneOf(SIZE),\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  onRendered: PropTypes.func,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  dialogClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  style: PropTypes.object,\n  dialogStyle: PropTypes.object,\n  backdropStyle: PropTypes.object,\n  show: PropTypes.bool,\n  full: PropTypes.bool,\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  keyboard: PropTypes.bool,\n  transition: PropTypes.elementType,\n  dialogTransitionTimeout: PropTypes.number,\n  backdropTransitionTimeout: PropTypes.number,\n  autoFocus: PropTypes.bool,\n  enforceFocus: PropTypes.bool,\n  overflow: PropTypes.bool,\n  drawer: PropTypes.bool,\n  dialogComponentClass: PropTypes.elementType,\n  animation: PropTypes.any,\n  animationProps: PropTypes.object,\n  animationTimeout: PropTypes.number,\n  onEscapeKeyUp: PropTypes.func,\n  onBackdropClick: PropTypes.func,\n  onShow: PropTypes.func,\n  onHide: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\nModal.defaultProps = {\n  size: 'sm',\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  animation: Bounce,\n  animationTimeout: 300,\n  dialogComponentClass: ModalDialog,\n  overflow: true\n};\nvar EnhancedModal = defaultProps({\n  classPrefix: 'modal'\n})(Modal);\nsetStatic('Body', ModalBody)(EnhancedModal);\nsetStatic('Header', ModalHeader)(EnhancedModal);\nsetStatic('Title', ModalTitle)(EnhancedModal);\nsetStatic('Footer', ModalFooter)(EnhancedModal);\nsetStatic('Dialog', ModalDialog)(EnhancedModal);\nexport default setDisplayName('Modal')(EnhancedModal);","map":null,"metadata":{},"sourceType":"module"}