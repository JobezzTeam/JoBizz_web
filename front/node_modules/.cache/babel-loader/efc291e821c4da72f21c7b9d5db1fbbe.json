{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _get from \"lodash/get\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport setStatic from 'recompose/setStatic';\nimport shallowEqual from 'rsuite-utils/lib/utils/shallowEqual';\nimport NavItem from './NavItem';\nimport { prefix, getUnhandledProps, defaultProps, ReactChildren } from '../utils';\nimport { getClassNamePrefix } from '../utils/prefix';\nimport { NavbarContext } from '../Navbar/Navbar';\nimport { SidenavContext } from '../Sidenav/Sidenav';\n\nvar Nav =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Nav, _React$Component);\n\n  function Nav() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Nav.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        classPrefix = _this$props.classPrefix,\n        appearance = _this$props.appearance,\n        vertical = _this$props.vertical,\n        justified = _this$props.justified,\n        reversed = _this$props.reversed,\n        pullRight = _this$props.pullRight,\n        className = _this$props.className,\n        children = _this$props.children,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classPrefix\", \"appearance\", \"vertical\", \"justified\", \"reversed\", \"pullRight\", \"className\", \"children\"]);\n\n    var _ref = this.context || {},\n        _ref$sidenav = _ref.sidenav,\n        sidenav = _ref$sidenav === void 0 ? false : _ref$sidenav,\n        _ref$expanded = _ref.expanded,\n        expanded = _ref$expanded === void 0 ? false : _ref$expanded,\n        _ref$activeKey = _ref.activeKey,\n        activeKey = _ref$activeKey === void 0 ? props.activeKey : _ref$activeKey,\n        _ref$onSelect = _ref.onSelect,\n        onSelect = _ref$onSelect === void 0 ? props.onSelect : _ref$onSelect;\n\n    var addPrefix = prefix(classPrefix);\n    var globalClassNamePrefix = getClassNamePrefix();\n    var hasWaterline = appearance !== 'default';\n    var items = ReactChildren.mapCloneElement(children, function (item) {\n      var _item$props = item.props,\n          eventKey = _item$props.eventKey,\n          active = _item$props.active,\n          rest = _objectWithoutPropertiesLoose(_item$props, [\"eventKey\", \"active\"]);\n\n      var displayName = _get(item, ['type', 'displayName']);\n\n      if (displayName === 'NavItem') {\n        return _extends({}, rest, {\n          onSelect: onSelect,\n          hasTooltip: sidenav && !expanded,\n          active: _isUndefined(activeKey) ? active : shallowEqual(activeKey, eventKey)\n        });\n      } else if (displayName === 'Dropdown') {\n        return _extends({}, rest, {\n          onSelect: onSelect,\n          activeKey: activeKey,\n          componentClass: 'li'\n        });\n      }\n\n      return null;\n    });\n    var unhandled = getUnhandledProps(Nav, props);\n    return React.createElement(NavbarContext.Consumer, null, function (navbar) {\n      var _classNames;\n\n      var classes = classNames(classPrefix, addPrefix(appearance), className, (_classNames = {}, _classNames[globalClassNamePrefix + \"navbar-nav\"] = navbar, _classNames[globalClassNamePrefix + \"navbar-right\"] = pullRight, _classNames[globalClassNamePrefix + \"sidenav-nav\"] = sidenav, _classNames[addPrefix('horizontal')] = navbar || !vertical && !sidenav, _classNames[addPrefix('vertical')] = vertical || sidenav, _classNames[addPrefix('justified')] = justified, _classNames[addPrefix('reversed')] = reversed, _classNames));\n      return React.createElement(\"div\", _extends({}, unhandled, {\n        className: classes\n      }), React.createElement(\"ul\", null, items), hasWaterline && React.createElement(\"div\", {\n        className: addPrefix('waterline')\n      }));\n    });\n  };\n\n  return Nav;\n}(React.Component);\n\nNav.contextType = SidenavContext;\nNav.propTypes = {\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  appearance: PropTypes.oneOf(['default', 'subtle', 'tabs']),\n  // Reverse Direction of tabs/subtle\n  reversed: PropTypes.bool,\n  justified: PropTypes.bool,\n  vertical: PropTypes.bool,\n  pullRight: PropTypes.bool,\n  activeKey: PropTypes.any,\n  onSelect: PropTypes.func\n};\nNav.defaultProps = {\n  appearance: 'default'\n};\nvar EnhancedNav = defaultProps({\n  classPrefix: 'nav'\n})(Nav);\nsetStatic('Item', NavItem)(EnhancedNav);\nexport default EnhancedNav;","map":null,"metadata":{},"sourceType":"module"}