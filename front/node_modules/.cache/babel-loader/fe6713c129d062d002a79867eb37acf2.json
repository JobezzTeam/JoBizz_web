{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _omit from \"lodash/omit\";\nimport _pick from \"lodash/pick\";\nimport _trim from \"lodash/trim\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport compose from 'recompose/compose';\nimport { defaultProps, prefix, getUnhandledProps, createChainedFunction, getDataGroupBy, withPickerMethods } from '../utils';\nimport { reactToString, filterNodesOfTree, findNodeOfTree, shallowEqual } from 'rsuite-utils/lib/utils';\nimport { DropdownMenu, DropdownMenuItem, PickerToggle, PickerToggleTrigger, getToggleWrapperClassName, onMenuKeyDown, MenuWrapper, SearchBar } from '../Picker';\nimport { PLACEMENT } from '../constants';\n\nvar SelectPicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(SelectPicker, _React$Component);\n\n  function SelectPicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.positionRef = void 0;\n    _this.menuContainerRef = void 0;\n    _this.searchBarContainerRef = void 0;\n    _this.toggleRef = void 0;\n    _this.triggerRef = void 0;\n\n    _this.getFocusableMenuItems = function () {\n      var labelKey = _this.props.labelKey;\n      var menuItems = _this.menuContainerRef.current.menuItems;\n\n      if (!menuItems) {\n        return [];\n      }\n\n      var items = Object.values(menuItems).map(function (item) {\n        return item.props.getItemData();\n      });\n      return filterNodesOfTree(items, function (item) {\n        return _this.shouldDisplay(item[labelKey]);\n      });\n    };\n\n    _this.getToggleInstance = function () {\n      return _this.toggleRef.current;\n    };\n\n    _this.getPositionInstance = function () {\n      return _this.positionRef.current;\n    };\n\n    _this.focusNextMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index + 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.focusPrevMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index - 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.selectFocusMenuItem = function (event) {\n      var focusItemValue = _this.state.focusItemValue;\n      var _this$props = _this.props,\n          data = _this$props.data,\n          valueKey = _this$props.valueKey;\n\n      if (!focusItemValue) {\n        return;\n      } // Find active `MenuItem` by `value`\n\n\n      var focusItem = findNodeOfTree(data, function (item) {\n        return shallowEqual(item[valueKey], focusItemValue);\n      });\n\n      _this.setState({\n        value: focusItemValue\n      });\n\n      _this.handleSelect(focusItemValue, focusItem, event);\n\n      _this.handleChange(focusItemValue, event);\n\n      _this.handleCloseDropdown();\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _this$toggleRef, _this$toggleRef$curre, _this$toggleRef$curre2;\n\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          active = _this$state.active; // enter\n\n      if ((!focusItemValue || !active) && event.keyCode === 13) {\n        _this.handleToggleDropdown();\n      } // delete\n\n\n      if (event.keyCode === 8 && event.target === ((_this$toggleRef = _this.toggleRef) === null || _this$toggleRef === void 0 ? void 0 : (_this$toggleRef$curre = _this$toggleRef.current) === null || _this$toggleRef$curre === void 0 ? void 0 : (_this$toggleRef$curre2 = _this$toggleRef$curre.getToggleNode) === null || _this$toggleRef$curre2 === void 0 ? void 0 : _this$toggleRef$curre2.call(_this$toggleRef$curre))) {\n        _this.handleClean(event);\n      }\n\n      if (!_this.menuContainerRef.current) {\n        return;\n      }\n\n      onMenuKeyDown(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: _this.selectFocusMenuItem,\n        esc: _this.handleCloseDropdown\n      });\n    };\n\n    _this.handleItemSelect = function (value, item, event) {\n      var nextState = {\n        value: value,\n        focusItemValue: value\n      };\n\n      _this.setState(nextState);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChange(value, event);\n\n      _this.handleCloseDropdown();\n    };\n\n    _this.handleSelect = function (value, item, event) {\n      var _this$props$onSelect, _this$props2, _this$toggleRef$curre3;\n\n      (_this$props$onSelect = (_this$props2 = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props2, value, item, event);\n      (_this$toggleRef$curre3 = _this.toggleRef.current) === null || _this$toggleRef$curre3 === void 0 ? void 0 : _this$toggleRef$curre3.onFocus();\n    };\n\n    _this.handleSearch = function (searchKeyword, event) {\n      var _this$props$onSearch, _this$props3;\n\n      _this.setState({\n        searchKeyword: searchKeyword,\n        focusItemValue: undefined\n      });\n\n      (_this$props$onSearch = (_this$props3 = _this.props).onSearch) === null || _this$props$onSearch === void 0 ? void 0 : _this$props$onSearch.call(_this$props3, searchKeyword, event);\n    };\n\n    _this.handleCloseDropdown = function () {\n      if (_this.triggerRef.current) {\n        _this.triggerRef.current.hide();\n      }\n    };\n\n    _this.handleOpenDropdown = function () {\n      if (_this.triggerRef.current) {\n        _this.triggerRef.current.show();\n      }\n    };\n\n    _this.handleToggleDropdown = function () {\n      var active = _this.state.active;\n\n      if (active) {\n        _this.handleCloseDropdown();\n\n        return;\n      }\n\n      _this.handleOpenDropdown();\n    };\n\n    _this.handleChange = function (value, event) {\n      var _this$props$onChange, _this$props4;\n\n      (_this$props$onChange = (_this$props4 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props4, value, event);\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props5 = _this.props,\n          disabled = _this$props5.disabled,\n          cleanable = _this$props5.cleanable;\n\n      if (disabled || !cleanable) {\n        return;\n      }\n\n      var nextState = {\n        value: null,\n        focusItemValue: null\n      };\n\n      _this.setState(nextState);\n\n      _this.handleChange(null, event);\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props6;\n\n      _this.setState({\n        searchKeyword: '',\n        active: false\n      });\n\n      (_this$props$onClose = (_this$props6 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props6);\n    };\n\n    _this.handleOpen = function () {\n      var _this$props$onOpen, _this$props7;\n\n      var value = _this.getValue();\n\n      _this.setState({\n        active: true,\n        focusItemValue: value\n      });\n\n      (_this$props$onOpen = (_this$props7 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props7);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    var _value = props.value,\n        defaultValue = props.defaultValue,\n        groupBy = props.groupBy,\n        _valueKey = props.valueKey,\n        _labelKey = props.labelKey;\n    var nextValue = _value || defaultValue;\n    _this.state = {\n      value: nextValue,\n      focusItemValue: nextValue,\n      searchKeyword: ''\n    };\n    _this.positionRef = React.createRef();\n    _this.menuContainerRef = React.createRef();\n    _this.toggleRef = React.createRef();\n    _this.triggerRef = React.createRef(); // for test\n\n    _this.searchBarContainerRef = React.createRef();\n\n    if (groupBy === _valueKey || groupBy === _labelKey) {\n      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n    }\n\n    return _this;\n  }\n\n  var _proto = SelectPicker.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return _isUndefined(value) ? this.state.value : value;\n  };\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  _proto.shouldDisplay = function shouldDisplay(label) {\n    var searchKeyword = this.state.searchKeyword;\n\n    if (!_trim(searchKeyword)) {\n      return true;\n    }\n\n    var keyword = searchKeyword.toLocaleLowerCase();\n\n    if (typeof label === 'string' || typeof label === 'number') {\n      return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n    } else if (React.isValidElement(label)) {\n      var nodes = reactToString(label);\n      return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n    }\n\n    return false;\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var valueKey = this.props.valueKey;\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if (shallowEqual(focusItemValue, items[i][valueKey])) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this2 = this;\n\n    var _this$props8 = this.props,\n        data = _this$props8.data,\n        labelKey = _this$props8.labelKey,\n        groupBy = _this$props8.groupBy,\n        searchable = _this$props8.searchable,\n        locale = _this$props8.locale,\n        renderMenu = _this$props8.renderMenu,\n        renderExtraFooter = _this$props8.renderExtraFooter,\n        menuClassName = _this$props8.menuClassName,\n        menuStyle = _this$props8.menuStyle,\n        menuAutoWidth = _this$props8.menuAutoWidth,\n        sort = _this$props8.sort;\n    var focusItemValue = this.state.focusItemValue;\n    var classes = classNames(this.addPrefix('select-menu'), menuClassName);\n    var filteredData = filterNodesOfTree(data, function (item) {\n      return _this2.shouldDisplay(item[labelKey]);\n    }); // Create a tree structure data when set `groupBy`\n\n    if (groupBy) {\n      filteredData = getDataGroupBy(filteredData, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      filteredData = filteredData.sort(sort(false));\n    }\n\n    var menuProps = _pick(this.props, Object.keys(_omit(DropdownMenu.propTypes, ['className', 'style', 'classPrefix'])));\n\n    var menu = filteredData.length ? React.createElement(DropdownMenu, _extends({}, menuProps, {\n      classPrefix: this.addPrefix('select-menu'),\n      dropdownMenuItemClassPrefix: this.addPrefix('select-menu-item'),\n      dropdownMenuItemComponentClass: DropdownMenuItem,\n      ref: this.menuContainerRef,\n      activeItemValues: [this.getValue()],\n      focusItemValue: focusItemValue,\n      data: filteredData,\n      group: !_isUndefined(groupBy),\n      onSelect: this.handleItemSelect\n    })) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText);\n    return React.createElement(MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: menuStyle,\n      onKeyDown: this.handleKeyDown,\n      getToggleInstance: this.getToggleInstance,\n      getPositionInstance: this.getPositionInstance\n    }, searchable && React.createElement(SearchBar, {\n      ref: this.searchBarContainerRef,\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: this.state.searchKeyword\n    }), renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props9 = this.props,\n        data = _this$props9.data,\n        valueKey = _this$props9.valueKey,\n        labelKey = _this$props9.labelKey,\n        placeholder = _this$props9.placeholder,\n        renderValue = _this$props9.renderValue,\n        disabled = _this$props9.disabled,\n        cleanable = _this$props9.cleanable,\n        locale = _this$props9.locale,\n        toggleComponentClass = _this$props9.toggleComponentClass,\n        style = _this$props9.style,\n        onEntered = _this$props9.onEntered,\n        onExited = _this$props9.onExited,\n        onClean = _this$props9.onClean,\n        rest = _objectWithoutPropertiesLoose(_this$props9, [\"data\", \"valueKey\", \"labelKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEntered\", \"onExited\", \"onClean\"]);\n\n    var unhandled = getUnhandledProps(SelectPicker, rest);\n    var value = this.getValue(); // Find active `MenuItem` by `value`\n\n    var activeItem = findNodeOfTree(data, function (item) {\n      return shallowEqual(item[valueKey], value);\n    });\n    var hasValue = !!activeItem;\n    var selectedElement = placeholder;\n\n    if (activeItem === null || activeItem === void 0 ? void 0 : activeItem[labelKey]) {\n      selectedElement = activeItem[labelKey];\n\n      if (renderValue) {\n        selectedElement = renderValue(value, activeItem, selectedElement);\n      }\n    }\n\n    var classes = getToggleWrapperClassName('select', this.addPrefix, this.props, hasValue);\n    return React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      positionRef: this.positionRef,\n      onEntered: createChainedFunction(this.handleOpen, onEntered),\n      onExit: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      tabIndex: -1,\n      role: \"menu\"\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      ref: this.toggleRef,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      onKeyDown: this.handleKeyDown,\n      componentClass: toggleComponentClass,\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), selectedElement || locale.placeholder)));\n  };\n\n  return SelectPicker;\n}(React.Component);\n\nSelectPicker.propTypes = {\n  appearance: PropTypes.oneOf(['default', 'subtle']),\n  data: PropTypes.array,\n  locale: PropTypes.object,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  containerPadding: PropTypes.number,\n  block: PropTypes.bool,\n  toggleComponentClass: PropTypes.elementType,\n  menuClassName: PropTypes.string,\n  menuStyle: PropTypes.object,\n  menuAutoWidth: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledItemValues: PropTypes.array,\n  maxHeight: PropTypes.number,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  renderValue: PropTypes.func,\n  renderExtraFooter: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  onClean: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  onHide: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func,\n\n  /**\n   * group by key in `data`\n   */\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  placeholder: PropTypes.node,\n  searchable: PropTypes.bool,\n  cleanable: PropTypes.bool,\n  open: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  placement: PropTypes.oneOf(PLACEMENT),\n  style: PropTypes.object,\n\n  /**\n   * Prevent floating element overflow\n   */\n  preventOverflow: PropTypes.bool\n};\nSelectPicker.defaultProps = {\n  appearance: 'default',\n  data: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  searchable: true,\n  cleanable: true,\n  menuAutoWidth: true,\n  placement: 'bottomStart'\n};\nvar enhance = compose(defaultProps({\n  classPrefix: 'picker'\n}), withPickerMethods());\nexport default enhance(SelectPicker);","map":null,"metadata":{},"sourceType":"module"}